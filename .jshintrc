{
    "browser": true,
    "expr": true,
    "node": true,
    "globals": {            // Extra globals.
        "define": false,
        "describe": false,
        "it": false,
        "before": false,
        "after": false,
        "beforeEach": false,
        "afterEach": false,
        "DEBUG": false,
        "PACKAGE_VERSION": false,
        "PACKAGE_NAME": false
    },

    "curly": true,          // Require {} for every new block or scope.
    "eqeqeq": true,         // Require triple equals i.e. `===`.
    "forin": true,          // Tolerate `for in` loops without `hasOwnPrototype`.
    "immed": true,          // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef": "nofunc",        // Prohibit variable use before definition.
    "newcap": false,        // Require capitalization of all constructor functions e.g. `new F()`.
    "noarg": true,          // prohibits the use of arguments.caller and arguments.callee
    "noempty": true,        // Prohibit use of empty blocks.
    "nonew": false,         // Prohibit use of constructors for side-effects.
    "plusplus": false,      // Prohibit use of `++` & `--`.
    "quotmark": "double",
    "strict": true,         // Require `use strict` pragma in every file.
    "trailing": true,       // Prohibit trailing whitespaces.
    "undef": true,          // Require all non-global variables be declared before they are used.

    "asi": false,           // Tolerate Automatic Semicolon Insertion (no semicolons).
    "bitwise": true,        // This option prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others. Bitwise operators are very rare in JavaScript programs and quite often & is simply a mistyped &&.
    "boss": false,          // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "debug": false,         // Allow debugger statements e.g. browser breakpoints.
    "eqnull": true,         // Tolerate use of `== null`.
    "esnext": false,        // Allow ES.next specific features such as `const` and `let`.
    "evil": false,          // Tolerate use of `eval`.
    "freeze": true,          // This options prohibits overwriting prototypes of native objects such as Array, Date and so on.
    "funcscope": false,     // Tolerate declarations of variables inside of control structures while accessing them later from the outside.
    "globalstrict": false,  // Allow global "use strict" (also enables 'strict').
    "iterator": false,      // Allow usage of __iterator__ property.
    "lastsemic": false,     // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.
    "laxbreak": false,      // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "laxcomma": false,      // Suppress warnings about comma-first coding style.
    "loopfunc": false,      // Allow functions to be defined within loops.
    "multistr": false,      // Tolerate multi-line strings.
    "proto": false,         // Tolerate __proto__ property. This property is deprecated.
    "scripturl": false,     // Tolerate script-targeted URLs.
    "shadow": false,        // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "smarttabs": false,     // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.
    "sub": true,            // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "supernew": false,      // Tolerate `new function () { ... };` and `new Object;`.
    "unused": "vars",
    "validthis": true       // Tolerate strict violations when the code is running in strict mode and you use this in a non-constructor function
}
